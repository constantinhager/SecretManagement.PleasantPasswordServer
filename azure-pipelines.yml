trigger:
  branches:
    include:
      - master
  paths:
    include:
      - SecretManagement.PleasantPasswordServer.Extension
      - SecretManagement.PleasantPasswordServer
    exclude:
      - azure-pipelines.yml
      - .gitignore
      - LICENSE

pr: none

stages:
- stage: Build
  jobs:
  - job: 'Linux'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: PowerShell@2
      inputs:
          targetType: 'inline'
          script: |
            Install-Module -Name InvokeBuild -Force -AllowClobber
          pwsh: true
      displayName: 'Install InvokeBuild'

    - task: PowerShell@2
      inputs:
          targetType: 'inline'
          script: |
            Invoke-Build -File './build.ps1' -Verbose
          pwsh: true
      displayName: 'Build Module'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.Repository.LocalPath)/Release'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy Release Folder to Staging Directory'

    - task: PublishBuildArtifacts@1
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
      displayName: 'Publish Artifact to Azure DevOps'

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:

  - job: 'DeployWork'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      displayName: 'Checkout sources'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: current
        downloadType: single
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
            $dropDirectory = Join-Path -Path $env:SYSTEM_ARTIFACTSDIRECTORY -ChildPath 'drop'
            $ModuleNameFull = Join-Path $dropDirectory -ChildPath "SecretManagement.PleasantPasswordServer"
            Install-Module Microsoft.PowerShell.SecretManagement -Force
            Import-Module -Name $ModuleNameFull -Verbose
            Publish-Module -Path "$ModuleNameFull" -NuGetApiKey $env:PS_GALLERY_SECRET -Verbose
        pwsh: true
      env:
        PS_GALLERY_SECRET: $(PSGallery)
      displayName: 'Publish To PowerShell Gallery'